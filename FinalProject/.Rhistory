View(app)
View(project)
project <- read.csv("FinalProject.csv",header = F)
View(project)
View(project)
View(app)
dataset <- project
# 가독성을 위한 코딩 변경
dataset$Content.Rating[dataset$Content.Rating == 'Everyone'] <- 0
dataset <- app
# 가독성을 위한 코딩 변경
dataset$Content.Rating[dataset$Content.Rating == 'Everyone'] <- 0
dataset$Content.Rating[dataset$Content.Rating == 'Teen'] <- 1
app <- read.csv("Google-Playstore-Full.csv",header = T, stringsAsFactors = F)
app <- app[-c(10,11,12,13,14,15)]
# 데이터 결측치 제거
app <- na.omit(app)
# Data Rating 전처리
unique(app$Rating)
# installs 전처리
# ,+기호 제거
app$Installs <- str_replace_all(app$Installs, ",","")
app$Installs <- str_replace_all(app$Installs, "\\W","")
# size 전처리
app$Size <- str_replace_all(app$Size, "M", "")
app$Size <- str_replace_all(app$Size, "Varies with device", "")
#varies with device 값을 평균값으로 처리
app$Size <- as.numeric(app$Size, na.rm = T)
app$Size <- ifelse(!is.na(app$Size),app$Size,0)
app$Size <- ifelse(app$Size != 0, app$Size, mean(app$Size))
app$Size <-round(app$Size,2)
app$Price <- str_replace_all(app$Price,"\\$","")
dataset <- app
# 가독성을 위한 코딩 변경
dataset$Content.Rating[dataset$Content.Rating == 'Everyone'] <- 0
dataset$Content.Rating[dataset$Content.Rating == 'Teen'] <- 1
dataset$Content.Rating[dataset$Content.Rating == 'Everyone 10+'] <- 0
dataset$Content.Rating[dataset$Content.Rating == 'Mature 17+'] <- 2
dataset$Content.Rating[dataset$Content.Rating == 'Adults only 18+'] <- 2
dataset$Content.Rating[dataset$Content.Rating == 'Unrated'] <- 3
dataset$Content.Rating[dataset$Content.Rating == '$0.99'] <- 3
dataset$Content.Rating[dataset$Content.Rating == '$2.49'] <- 3
dataset$Content.Rating[dataset$Content.Rating == '17M'] <- 3
dataset$Content.Rating[dataset$Content.Rating == '100,000+'] <- 3
View(app)
View(dataset)
project <- read.csv("FinalProject.csv",header = F, stringsAsFactors = F)
View(project)
View(dataset)
write.csv(dataset, "app2.csv", row.names = F)
View(app1)
View(app1)
View(dataset)
View(project)
View(project)
summary(project$v3)
project <- read.csv("FinalProject.csv",header = F, stringsAsFactors = F)
View(project)
summary(project$v3)
summary(project$V3)
View(project)
View(app)
View(app1)
View(dataset)
View(app)
View(dataset)
View(dataset)
View(app)
# Data Rating 전처리
unique(app$Rating)
summary(app$Rating)
app$Rating <- ifelse(!is.nan, app$Rating, 0)
app$Rating <- ifelse(is.numeric(), app$Rating, 0)
summary(app$Rating)
View(project)
View(project)
app$Rating <- ifelse(is.numeric(), app$Rating, 0)
app$Rating <- ifelse(!is.numeric(), 0, app$Rating)
app$Rating <- ifelse(!is.numeric(), 1, app$Rating)
app$Rating <- ifelse(!is.numeric(), 1, app$Rating)
app$Rating <- ifelse(!is.numeric(app$Rating), 0, app$Rating)
summary(app$Rating)
View(app1)
View(app)
View(app1)
app <- app1
app$Rating <- ifelse(!is.numeric(app$Rating), app$Rating,0)
View(app)
View(app)
View(app1)
View(project)
setwd("C:/Users/cjy17/Desktop/project")
app <- read.csv("app5.csv",header = T, stringsAsFactors = F)
app
View(app)
# 첫 행 삭제
app <- app[,-1]
View(app)
write.csv(app,"app5.csv")
app <- read.csv("app5.csv",header = T, stringsAsFactors = F)
View(app)
write.csv(app,"app5.csv")
# 첫 행 삭제
app <- app[,-1]
View(app)
write.csv(app,"app5.csv")
write.csv(app,"app6.csv")
View(app)
app <- read.csv("app.csv",header = T, stringsAsFactors = F)
app
View(app)
str(app)
en <- eigen(cor(app))
names(en)
# 수치형 데이터만
app2 <- app[-c(0,1,8,9)]
str(app2)
# 수치형 데이터만
app2 <- app[-c(0,1,8,9)]
str(app2)
pc <- prcomp(app) # principle component 주요성분이 어떻게 구성되어 있는지를 알 수 있다.
summary(pc)
app2 <- app[-c(1,2,9,10)]
str(app2)
app <- app[-c(1,2,9,10)]
str(app)
summary(pc)
pc <- prcomp(app) # principle component 주요성분이 어떻게 구성되어 있는지를 알 수 있다.
summary(pc)
# Importance of components: ex) 흰색을 표현할때 어떠한 성분이 가장 많은 영향을 끼치는가?
#                                     PC1    PC2     PC3     PC4     PC5     PC6
# Standard deviation(표준편차)      2.389 1.5532 0.87727 0.56907 0.19315 0.12434
# Proportion of Variance(분산비율)  0.616 0.2603 0.08305 0.03495 0.00403 0.00167 요소가 미치는 비중을 표현
# Cumulative Proportion()           0.616 0.8763 0.95936 0.99431 0.99833 1.00000
plot(pc) # 주성분의 값을 분포도의 값으로 보여주고 있다.
Summary(app$Size)
summary(app$Size)
result <- factanal(app, factors = 2, rotation="varimax")
result
result <- factanal(app, factors = 5, rotation="varimax")
result <- factanal(app, factors = 3, rotation="varimax")
result
result <- factanal(app, factors = 4, rotation="varimax")
result <- factanal(app, factors = 3, rotation="varimax")
result
# 단순 회귀분석
y = app$Installs # 종속변수
x = app$Size # 독립변수
df <- data.frame(x, y)
# 회귀모델 생성
result.lm <- lm(formula=y ~ x, data=df) # 리니어모델(lm)
# 회귀분석의 절편과 기울기
result.lm # 회귀계수
# [실습] 모델의 적합값과 잔차 보기
names(result.lm)
fitted.values(result.lm)[1:2]
head(df, 1) # x=4, y=3
Y = 331100 + 19561 * 14.86
Y # 3.7361 - 회귀방정식에 의해서 계산된 적합값
residuals(result.lm)[1:2] # 모델의 잔차 출력
# [실습] 선형회귀분석 모델 시각화[오류 확인]
# x,y 산점도 그리기
plot(formula=y ~ x, data=df)
# 회귀분석
result.lm <- lm(formula=y ~ x, data=df)
# 회귀선
abline(result.lm, col='red')
# [실습] 선형회귀분석 결과 보기
summary(result.lm)
View(app)
summary(app$Installs)
str(app) # 'data.frame':	267033 obs. of  11 variables:
app %>%
summarise_all(
funs(sum(is.na(.)))
) %>%
gather() %>%
# Only show columns with NA
filter(value> 1) %>%
arrange(-value) %>%
hchart('column', hcaes(x = 'key', y = 'value', color = 'key')) %>%
hc_add_theme(hc_theme_elementary()) %>%
hc_title(text = "Columns with NA values")
library(tidyverse)
install.packages('tidyverse')
# 적절성 + 친밀도 -> 만족도
y = app$Installs # 종속변수
x1 = app$Size # 독립변수2
x2 = app$Price # 독립변수1
df <- data.frame(x1, x2, y)
result.lm <- lm(formula=y ~ x1 + x2, data=df)
# 계수 확인
result.lm
View(app)
# 다중공선성 문제 체크
install.packages("car")
library(car)
vif(result.lm) # x1/x2 < 10 미만인지 체크.
# 다중회귀 분석 결과 보기
summary(result.lm)
result.lm <- lm(formula=log(y) ~ x1 + x2, data=df)
# 계수 확인
result.lm
vif(result.lm) # x1/x2 < 10 미만인지 체크.
# 다중회귀 분석 결과 보기
summary(result.lm)
result.lm <- lm(formula=log(y) ~ x1*1000000 + x2, data=df)
result.lm <- lm(formula=log(y) ~ (x1*1000000) + x2, data=df)
result.lm <- lm(formula=log(y) ~ (x1*100) + x2, data=df)
result.lm <- lm(formula=log(y) ~ x1* + x2, data=app)
# 계수 확인
result.lm
vif(result.lm) # x1/x2 < 10 미만인지 체크.
# 다중회귀 분석 결과 보기
summary(result.lm)
# 적절성 + 친밀도 -> 만족도
y = app$Installs # 종속변수
x1 = app$Size # 독립변수2
x2 = app$Price # 독립변수1
df <- data.frame(x1, x2, y)
result.lm <- lm(formula=log(y) ~ x1* + x2, data=df)
# 계수 확인
result.lm
vif(result.lm) # x1/x2 < 10 미만인지 체크.
# 다중회귀 분석 결과 보기
summary(result.lm)
result.lm <- lm(formula=log(y) ~ (float)(1000000*x1)* + x2, data=df)
result.lm <- lm(formula=log(y) ~ (float64)(1000000*x1)* + x2, data=df)
result.lm <- lm(formula=log(y) ~ (1000000*x1)* + x2, data=df)
y = app$Installs
x = app$Size
df <- data.frame(x, y)
# 회귀모델 생성
result.lm <- lm(formula=y ~ x, data=df) # 리니어모델(lm)
# 회귀분석의 절편과 기울기
result.lm # 회귀계수
summary(result.lm)
app %>%
count(Size) %>%
hchart('area', hcaes(x = "Size", y = "n")) %>%
hc_colors("#fb4901") %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_title(text = "Distribution of application size (in MB)")
install.packages(c("highcharter", "xts"))
app %>%
count(Size) %>%
hchart('area', hcaes(x = "Size", y = "n")) %>%
hc_colors("#fb4901") %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_title(text = "Distribution of application size (in MB)")
library(highcharter)
library(lubridate)
library(stringr)
library(xts)
app %>%
count(Size) %>%
hchart('area', hcaes(x = "Size", y = "n")) %>%
hc_colors("#fb4901") %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_title(text = "Distribution of application size (in MB)")
library(dplyr)
app %>%
count(Size) %>%
hchart('area', hcaes(x = "Size", y = "n")) %>%
hc_colors("#fb4901") %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_title(text = "Distribution of application size (in MB)")
app %>%
count(Size) %>%
hchart('area', hcaes(x = "Size", y = "Installs")) %>%
hc_colors("#fb4901") %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_title(text = "Distribution of application size (in MB)")
app %>%
count(Size) %>%
hchart('area', hcaes(x = "Size", y = "n")) %>%
hc_colors("#fb4901") %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_title(text = "Distribution of application size (in MB)")
View(app)
library(stats)
cor(app)
corgram(app)
corrgram(app)
install.packages("corrgram")
corrgram(app)
library(corrgram)
corrgram(app)
View(app)
corrgram(app, upper.panel=panel.conf)
app1<- app
app1$Reviews <- log(app$Reviews)
View(app1)
corrgram(app1, upper.panel=panel.conf)
View(app1)
app1$Installs <- log(app1$Installs)
corrgram(app1, upper.panel=panel.conf)
app2 <- exp(app1$Rating)
app2<- app1
app2$Rating <- exp(app1$Rating)
View(app2)
corrgram(app2, upper.panel=panel.conf)
app4 <- read.csv("app.csv",header = T, stringsAsFactors = F)
View(app4)
app4 <- app4[,-c(1,2)]
View(app4)
app4 <- app4[,-7]
View(app4)
hist(app4$Installs)
hist(app1$Installs)
View(app1)
hist(app4$Reviews)
hist(app1$Reviews)
View(app4)
View(app1)
View(app2)
hist(app1$Rating)
View(app1)
hist(app1$Size)
hist(app1$Size,xlim=c(0,150))
hist(app1$Size,xlim=c(0,100))
hist(app1$Size, xlim=c(0,20))
hist(app1$Size, c(20,100))
hist(app1$Size, xlim=c(20,100))
app5 <- app[app1$Size > 20]
app5 <- app[app1$Size > 20,]
View(app5)
hist(app5$Size)
hist(app5$Size, xlim = c(20,150))
app5 <- app5[app5$Price > 0]
app5 <- app5[app5$Price > 0,]
hist(app5)
hist(app5$Price)
app5 <- app5[app5$Price > 0 & app5$Price < 50 ,]
hist(app5$Price)
View(app)
hist(app$Content.Rating)
barplot(app$Content.Rating)
pie(app$Content.Rating, col=rainbow(3))
View(app5)
View(app)
View(app5)
View(app4)
View(app2)
y = app$Installs
x = app$Reviews
df <- data.frame(x, y)
# 회귀모델 생성
result.lm <- lm(formula=y ~ x, data=df) # 리니어모델(lm)
# 회귀분석의 절편과 기울기
result.lm # 회귀계수
summary(result.lm)
View(app)
corrgram(app)
View(app)
View(app)
app6 <- app[-1:-c(1,4,5,6,7)]
app6 <- app[:-c(1,4,5,6,7)]
app6 <- app[-1,-c(1,4,5,6,7)]
View(app6)
write.csv(app6,"app6.csv")
View(app)
View(app6)
View(app)
View(app6)
app <- read.csv("FinalProject7.csv",header = T, stringsAsFactors = F)
View(app)
app <- read.csv("FinalProject7.csv",header = F, stringsAsFactors = F)
app
View(app)
View(app1)
app$Installs2[app$Installs>0 & app$Installs<=5 ] <- 1
app <- app$Installs2
app <- read.csv("FinalProject7.csv",header = F, stringsAsFactors = F)
app$V12[app$V4>0 & app$V4<=5 ] <- 1
app$V12[app$V4>5 & app$V4<=10 ] <- 2
app$V12[app$V4>10 & app$V4<=15 ] <- 3
app$V12[app$V4>15 & app$V4<=20 ] <- 4
View(app)
write.csv(app, "FinalProject8.csv")
View(app)
View(app1)
View(app4)
summary(app5)
summary(app5$Installs)
max(app$Installs)
app5$Installs2 <- log10(app$Installs)
app5$Installs2 <- log10(app5$Installs)
View(app5)
max(app5$Installs2)
View(app5)
View(app4)
View(app2)
View(app1)
View(app6)
View(app)
write.csv(app, "FinialProject9", header=None)
write.csv(app, "FinialProject9", header= FALSE)
app <- app(header = None)
app <- app[header = None]
colnames(app,do.NULL = TRUE)
app
View(app)
app <- colnames(app,do.NULL = TRUE)
app <- read.csv("FinalProject7.csv",header = F, stringsAsFactors = F)
View(app)
app <- read.csv("FinalProject7.csv",header = T, stringsAsFactors = F)
app
View(app)
app <- read.csv("FinalProject7.csv",header = F)
app
View(app)
app <- read.csv("FinalProject7.csv",header = T, stringsAsFactors = T)
app
View(app)
app <- read.csv("FinalProject7.csv",header = T, stringsAsFactors = T)
app
View(app)
app <- read.csv("FinalProject8.csv",header = T, stringsAsFactors = T)
app
View(app)
app <- read.csv("FinalProject8.csv",header = F, stringsAsFactors = T)
app
View(app)
app <- read.csv("appdata2.csv",header = F, stringsAsFactors = T)
View(app)
app <- read.csv("appdata2.csv",header = T, stringsAsFactors = T)
View(app)
app1 <- app[,-1]
View(app)
View(app1)
app <- app[,-1]
plot(app$Installs)
app$Installs <- app$Installs[app$Installs < 2000000000]
app1 <- subset(app, app$Installs < 2000000000 & app$Installs > 500)
plot(app1$Installs)
app <- read.csv("appdata2.csv",header = T, stringsAsFactors = T)
app <- app[,-1]
plot(app$Installs)
app1 <- subset(app, app$Installs < 2000000000 & app$Installs >= 10000)
app1 <- subset(app, app$Installs < 2000000000)
plot(app1$Installs)
app1 <- subset(app, app$Installs < 900000000)
plot(app1$Installs)
table(app1$Installs)
app1 <- subset(app, app$Installs < 200000000 $app$Installs >= 100)
app1 <- subset(app, app$Installs < 200000000 & app$Installs >= 100)
plot(app1$Installs)
write.csv(app1,"FinalProject14")
write.csv(app1,"FinalProject14.csv")
library(rJava)
library(memoise)
library(KoNLP)
library(tm)
library(wordcloud)
library(dplyr)
library(stringr)
setwd("C:\workspaces\ai\FinalProject")
setwd("C:/workspaces/ai/FinalProject")
twitter <- read.csv("Final0323", header = T, stringsAsFactors = F)
twitter <- read.csv("Final0323.csv", header = T, stringsAsFactors = F)
View(twitter)
twitter <- read.csv("app5.csv", header = T, stringsAsFactors = F)
View(twitter)
# 특수 문자 제거
twitter$App.Name <- str_replace_all(twitter$App.Name , "\\W"," ")
# 트윗에서 명사 추출
nouns <- extractNoun(twitter$App.Name)
install.packages("KoNLP")
library(KoNLP)
# 트윗에서 명사 추출
nouns <- extractNoun(twitter$App.Name)
library(memoise)
install.packages("memoise")
install.packages("tm")
library(dplyr)
library(stringr)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre.8.0_91')
library(KoNLP)
install.packages("KoNLP")
library(rJava)
install.packages("KoNLP")
install.packages("KoNLP")
install.packages(".../path/to/package.tar.gz", type="source", repos=NULL)
# extractNoun() - 명사 추출 함수
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다.")
doc <- Corpus(VectorSource(twitter))
doc <- TermDocumentMatrix(doc,  #3.TermDocumentMatrix변환
control=list(                               #아래로옵션을나열
tokenize=words,                         #미리만들어둔함수(보통명사추출)로문장을자름
removeNumbers=T,                     #숫자제거
removePunctuation=T,                 #문장부호제거
wordLengths=c(1, 5)                    #1~5음절로이루어진단어만추출
))
doc <- as.matrix(doc)
doc <- rowSums(doc)
twitter <- read.csv("app5.csv", header = T, stringsAsFactors = F)
doc <- Corpus(VectorSource(twitter$App.Name))
doc <- TermDocumentMatrix(doc,  #3.TermDocumentMatrix변환
control=list(                               #아래로옵션을나열
tokenize=words,                         #미리만들어둔함수(보통명사추출)로문장을자름
removeNumbers=T,                     #숫자제거
removePunctuation=T,                 #문장부호제거
wordLengths=c(1, 5)                    #1~5음절로이루어진단어만추출
))
doc <- as.matrix(doc)
View(doc)
# 특수 문자 제거
twitter$App.Name <- str_replace_all(twitter$App.Name , "\\W"," ")
# 트윗에서 명사 추출
nouns <- extractNoun(twitter$App.Name)
install.packages("C:/Users/cjy17/Downloads/KoNLP_0.80.2.tar.gz")
